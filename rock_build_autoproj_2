#! /bin/bash
#
# Main build script in all build server jobs
#
# All arguments are passed to the autoproj_bootstrap script
#
# Control environment variables. All of these except CONFIG_DIR and CONFIG_NAME
# can be set by creating a $CONFIG_NAME.config shell file in $CONFIG_DIR (see
# the description of these two variables for more information)
#
#   SKIP_SUCCESSFUL: if set to true, any build show last result was successful
#                    is ignored. The default is false.
#   MODE:
#       full-bootstrap: remove the complete dev/ directory and bootstrap fresh
#       bootstrap: keep the currently checked out code in dev/. Just delete all
#                  build byproducts, gems and autoproj configuration
#       incremental: builds from the current state of dev/. If the build has
#                    been cleaned last time, the job is ignored
#       auto: do a bootstrap if dev/ is clean and otherwise do an incremental
#             build
#
#   DOCGEN: if set to true, the API documentation is generated
#   CLEAN_IF_SUCCESSFUL: remove all build byproducts if the build finishes
#                        successfully (useful to keep disk usage low)
#
#   CONFIG_DIR: directory where configuration files are stored. For each given
#     config name (see CONFIG_NAME below), a $CONFIG_NAME.config file is sourced
#     at the beginning of this shell script if it exists, and a $CONFIG_NAME.yml
#     file is used as the autoproj configuration file. It defaults to the
#     directory containing this script.
#   CONFIG_NAME: the name of the files to look for when loading configuration.
#     If the configuration files cannot be found, the corresponding default
#     config is searched as well. The default config name is obtained by
#     replacing the part before the first dash by "default". For instance
#     rock-master becomes default-master
#   RUBY: full path to the ruby executable to use
#   GEM: full path to the gem executable to use
#   BOOTSTRAP_URL: path to the autoproj bootstrap script to run (defaults to
#     rock-robotics.org/autoproj_bootstrap)
#   AUTOPROJ_OSDEPS_MODE: the mode in which to run the autoproj subsystem
#     (defaults to 'all')
#   PARALLEL: set parallel build level to the value of the variable
#   KEEP_GOING: if set execute autoproj with -k option
#   FORCE_DOCGEN: generate docs, even when the build fails
#   DISPLAYED_ERROR_LINE_COUNT: number of error lines tha should be displayed, \'all\' is valid too
#   STABLE_BUILD: mark all packages as stable (reduce build time and disk space, but might have side-effects)
#   BUILD_TESTS: Build the testsuites of all packages that have one (will be overriden to true if RUN_TESTS is set to true
#   RUN_TESTS: Run all testsuites from packages that have one, if set to true it will override BUILD_TESTS to true

echo "$0 started at `date`"

echo "running on:"
lsb_release -a

set -ex

if test -n "$Flavor"; then
    FLAVOR=$Flavor
else
    #Backward compatibilty for non-buildservers
    FLAVOR=`echo $CONFIG_NAME | sed 's/.*-\(.*\)/\1/'` 
fi

if test -n "$JOB_NAME"; then
    PROJECT=$JOB_NAME
else
    PROJECT=`echo $CONFIG_NAME | sed 's/\(.*\)-\(.*\)/\1/'` 
fi

REPRO_TYPE=$1
REPRO_URL=$2
REPRO_EXTRA=$3

if [ "x$FLAVOR" != "xmaster" ] && [ "x$FLAVOR" != "xstable" ]; then
    #Assuming a release name is passed
    RELEASE=$FLAVOR
    FLAVOR="stable"
    if [ -n "$REPRO_EXTRA" ] ; then
        BOOTSTRAP_ARGS="$REPRO_TYPE $REPRO_URL $REPRO_EXTRA"
    else
        #no additional args are passed to settign repro manually
        if [[ $RELEASE == *"rock-rc"* ]]; then
            BOOTSTRAP_ARGS="$REPRO_TYPE $REPRO_URL branch=$RELEASE"
        else
            BOOTSTRAP_ARGS="$REPRO_TYPE $REPRO_URL tag=$RELEASE"
        fi
    fi
else
    BOOTSTRAP_ARGS="$REPRO_TYPE $REPRO_URL $REPRO_EXTRA"
fi


# The directory in which configuration files are stored
if test -z "$CONFIG_DIR"; then
    CONFIG_DIR=$(dirname $0)
fi

#Override config filename with new flavor override (casue of release build)
CONFIG_NAME="$PROJECT-$FLAVOR"

default_config_name="default-$FLAVOR"

#Handling project specific settings (can override configfile)
if test -f $CONFIG_DIR/$CONFIG_NAME.config; then
  . $CONFIG_DIR/$CONFIG_NAME.config
elif test -f $CONFIG_DIR/$default_config_name.config; then
  . $CONFIG_DIR/$default_config_name.config
fi

if test -f $CONFIG_DIR/$CONFIG_NAME.yml; then
  configfile=$CONFIG_DIR/$CONFIG_NAME.yml
else
  configfile=$CONFIG_DIR/$default_config_name.yml
fi

echo $CONFIG_FILE
echo $FLAVOR
echo $BOOTSTRAP_ARGS

if test -z "$BOOTSTRAP_URL"; then
    BOOTSTRAP_URL=http://rock-robotics.org/master/autoproj_bootstrap
fi

if test -z "$AUTOPROJ_OSDEPS_MODE"; then
    AUTOPROJ_OSDEPS_MODE=all
fi

if test "x$SKIP_SUCCESSFUL" = "xtrue" && test -d dev; then
    if test -f dev/successful; then
        if test "x$DOCGEN" != "xtrue" || test -f dev/doc-successful; then
            echo "last build was successful and SKIP_SUCCESSFUL is set, doing nothing"
            exit 0
        else
            MODE=incremental
        fi
    fi
fi

if test -z "$RUBY"; then
    RUBY=ruby
fi
if test -z "$GEM"; then
    GEM=gem
fi
if test -z "$MODE"; then
    MODE=auto
fi


if test "x$MODE" = "xincremental"; then
    echo "MODE=incremental, doing an incremental build"
    do_incremental=1
    do_full_cleanup=0
elif test "x$MODE" = "xfull-bootstrap"; then
    echo "MODE=full-bootstrap, doing a full build, including checking out packages"
    do_incremental=0
    do_full_cleanup=1
elif test "x$MODE" = "xbootstrap"; then
    echo "MODE=bootstrap, doing a full build but not checking out packages again. Use full-bootstrap for that"
    do_incremental=0
    do_full_cleanup=0
elif test -d dev && ! test -f dev/successful; then
    echo "last build was unsuccessful, doing an incremental build"
    do_incremental=1
    do_full_cleanup=0
else
    echo "doing a full build"
    do_incremental=0
    do_full_cleanup=0
fi

if test "x$do_incremental" = "x1" && test -f dev/cleaned; then
    echo "this is an incremental build, but the last build got cleaned, doing nothing"
    exit 0
fi

rm -f dev/successful
rm -f dev/doc-successful
rm -f dev/cleaned
rm -f docgen.txt
rm -rf api

# If the current dev/install folder has a cache of the downloaded archives, then
# save it
if test -d dev/install/cache; then
    mkdir -p archive_cache
    rsync -a dev/install/cache/ archive_cache/
fi

if test "x$do_incremental" = "x0"; then
    if test "x$do_full_cleanup" = "x1"; then
        rm -rf dev
    elif test -d dev; then
        rm -rf dev/install
        find dev -type d -name build -exec rm -rf {} \; -prune
        rm -rf dev/autoproj
        rm -rf dev/.autoproj
#        bundle update
    fi
fi

# Always delete autoproj's configuration directory so that we always start fresh
# Otherwise, it would not get updated
rm -rf dev/.autoproj/remotes

# If there is an archive cache, copy it into our working directory
if test -d archive_cache; then
    mkdir -p dev/install/cache
    rsync -a archive_cache/ dev/install/cache/
fi


export AUTOPROJ_OSDEPS_MODE
export AUTOPROJ_BOOTSTRAP_IGNORE_NONEMPTY_DIR=1

# Install yard early, some C++ packages with Ruby bindings will pick it up and
# use it to generate the Ruby binding documentation
#if test "x$DOCGEN" = "xtrue"; then
#    $GEM install rdoc yard --no-rdoc --no-ri
#fi

if test "x$DOCGEN_ONLY" = "xtrue"; then
    do_doc_only=1
    DOCGEN="true"
else
    do_doc_only=0
fi

if test "x$RUN_TESTS" = "xtrue"; then
    BUILD_TESTS=true
fi

# If there are no autoproj/ directory, we need to start by bootstrapping
if ! test -d dev/autoproj; then
    bootstrap_script_name=$(basename $BOOTSTRAP_URL)
    rm -f $bootstrap_script_name
    wget $BOOTSTRAP_URL
    mkdir -p dev
    ( set -ex
      cd dev
      $RUBY ../$bootstrap_script_name --no-color --no-progress $BOOTSTRAP_ARGS
    )
fi

#additional build flags
BUILDFLAGS=""
UPDATEFLAGS=""
if ! test -z "$PARALLEL"; then
    BUILDFLAGS+=" -p$PARALLEL"
fi
if test "$KEEP_GOING" = "true" ; then
    BUILDFLAGS+=" -k"
    UPDATEFLAGS+=" -k"
fi
if test "x$ALL_KNOWN_PACKAGES" = "xtrue" ; then
    BUILDFLAGS+=" --all-known-packages"
    UPDATEFLAGS+=" --all-known-packages"
fi


#Check if this build should first do a local autoproj installation (useful for testing autoproj itself without releasing)
if test "x$LOCAL_AUTOPROJ" = "xtrue"; then
PREV_DIR=`pwd`
# We can finally copy the requested config file and build
( set -ex
  cd dev
  . ./env.sh
  cat $configfile >> ./.autoproj/config.yml
  if [ -n "$USE_OCL" ]; then
      sed -i "s/USE_OCL:.*$/USE_OCL: $USE_OCL/g" ./.autoproj/config.yml
  fi

  autoproj update --no-color --no-progress tools/autoproj tools/autobuild
  autoproj build --no-color --no-progress tools/autoproj tools/autobuild
 )
cd $PREV_DIR
fi



echo "Finished preparing, starting build at `date` with $RUBY"

# We can finally copy the requested config file and build
( set -ex
  cd dev
  . ./env.sh

  cat $configfile >> ./.autoproj/config.yml
  if [ -n "$USE_OCL" ]; then
      sed -i "s/USE_OCL:.*$/USE_OCL: $USE_OCL/g" ./.autoproj/config.yml
  fi

#  if [ -n "$DISPLAYED_ERROR_LINE_COUNT" ]; then
#    echo "Autobuild.displayed_error_line_count = $DISPLAYED_ERROR_LINE_COUNT" >> autoproj/init.rb
#  fi
#
#  if [ "x$STABLE_BUILD" == "xtrue" ]; then
#    echo "Autoproj.manifest.each_autobuild_package { |pkg| pkg.add_tag 'stable' }" >> autoproj/init.rb
#  fi



#  if test "x$BUILD_TESTS" = "xtrue"; then
#      autoproj test enable
#  else
#      autoproj test disable
#  fi

  
  if test -n "$TYPELIB_CXX_LOADER"; then
    sed -i "s/typelib_cxx_loader:.*$/typelib_cxx_loader: $TYPELIB_CXX_LOADER/g" ./.autoproj/config.yml
  fi

  # env can be changed based on config.yml, recreate env.sh and source it
  autoproj envsh
  . ./env.sh

  if test "x$FORCE_DOCGEN" = "0x1"; then  
    UPDATE_STATUS=$(autoproj update --no-color --no-progress $UPDATEFLAGS)
    BUILD_STATUS=$(autoproj build --no-color --no-progress $BUILDFLAGS)	
  else
    autoproj update --no-color --no-progress -p1 $UPDATEFLAGS
    autoproj build --no-color --no-progress $BUILDFLAGS
    touch successful
  fi
)

# Delete the stats file if we did not just do a full build
#
# Otherwise, generate the consolidated stats file
if test "x$do_incremental" = "x1"; then
    rm -f dev/install/log/stats.log
else
    `dirname $0`/consolidate_autoproj_stats dev/install/log/stats.log > dev/install/log/consolidated-stats.log
fi


if test "x$DOCGEN" = "xtrue"; then
    echo "Starting documentation generation at `date`"
    api_dir=$PWD/api
    # Only generate the documentation from autoproj. The complete documentation
    # is generated by a separate build target
    ( 
      cd dev
      . ./env.sh

      $GEM install hoe coderay rdoc --no-rdoc --no-ri
      $GEM install cmdparse -v 2.0.6 --no-rdoc --no-ri
      $GEM install webgen -v 0.5.17 --no-rdoc --no-ri

      rm -rf $GEM_HOME/doc
      $GEM rdoc autoproj
      $GEM rdoc autobuild

      echo "generating the API documentation from the autoproj packages"
      autoproj doc --no-color

      echo "Generating the model pack"
      rm -f install/doc/model-pack.tar.bz2
      if which rock-pack-models > /dev/null 2>&1; then
          rock-pack-models install/doc/model-pack.tar.bz2
      fi
      # HACK: remove slam/pcl as we are low on space on the website and it is a
      # publicly available API documentation. We should have a way to specify a
      # link in the manifest.xml instead
      rm -rf install/doc/slam/pcl
      echo "copying API documentation to $api_dir"
      rsync -a --delete install/doc/ $api_dir/
      
      autoproj_version=`$RUBY -e "require 'autoproj'; puts Autoproj::VERSION"`
      autoproj_api_dir=$GEM_HOME/doc/autoproj-$autoproj_version
      if test -d $autoproj_api_dir; then
          echo "copying autoproj API documentation to $api_dir/autoproj"
          rsync -a --delete $autoproj_api_dir/rdoc/ $api_dir/autoproj/
      else
          echo "could not find the autoproj API in $autoproj_api_dir"
      fi
      
      autobuild_version=`$RUBY -e "require 'autobuild'; puts Autobuild::VERSION"`
      autobuild_api_dir=$GEM_HOME/doc/autobuild-$autobuild_version
      if test -d $autobuild_api_dir; then
          echo "copying autobuild API documentation to $api_dir/autobuild"
          rsync -a $autobuild_api_dir/rdoc/ $api_dir/autobuild/
      else
          echo "could not find the autobuild API in $autobuild_api_dir"
      fi
    ) 2>&1 | tee docgen.txt
    echo "Finished documentation generation at `date`"
    touch dev/doc-successful
fi

if test "x$RUN_TESTS" = "xtrue"; then
    echo "Starting  to run testsuite at `date`"
    (
      cd dev
      . ./env.sh
      autoproj test
    ) 2>&1 | tee test-suite.te
    echo "Finished to run the testsuite at `date`"

    #Copy files of test results into their own folder
    (
    rm -fr testsuites || true
    mkdir -p testsuites
    cd testsuites
    find ../dev/install/log/ -type f -name "*-test.log" | sed -e "p;s/[\/.]/_/g" | sed -r "s/.*_install_log_(.*)/\1/g" | xargs  -n2 cp
    cd ..
    ) || true

    touch dev/test-successful
fi

# Save the logs AFTER documentation generation, so that they include docgen logs
# as well
mkdir -p logs
cp -r dev/install/log logs/`date +%F-%H%M%S`


if test "x$FORCE_DOCGEN" = "0x1"; then
  
    if test "x$UPDATE_STATUS" != "0x0"; then
	exit $UPDATE_STATUS
    fi
    if test "x$BUILD_STATUS" != "0x0"; then
	exit $UPDATE_STATUS
    fi
    touch successful
    exit $BUILD_STATUS
fi

if test "x$CLEAN_IF_SUCCESSFUL" = "xtrue"; then
    touch dev/cleaned

    if test -d dev/install/cache; then
        mkdir -p archive_cache
        rsync -a dev/install/cache/ archive_cache/
    fi
    rm -rf dev/install
    find dev -type d -name build -exec rm -rf {} \; -prune
    if test -d archive_cache; then
        mkdir -p dev/install/cache
        rsync -a archive_cache/ dev/install/cache/
    fi
fi
echo "Done at `date`"






